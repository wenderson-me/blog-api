openapi: 3.0.0
info:
  title: Blog API
  description: API REST para gerenciamento de blog com Node.js, Express e MongoDB
  version: 1.0.0
servers:
  - url: http://localhost:5000/api/v1
  - url: https://blog-api-production.example.com/api/v1
paths:
  /users:
    post:
      summary: Cria um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                avatar:
                  type: string
                bio:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '201':
          description: Usuário criado com sucesso
    get:
      summary: Lista todos os usuários (exemplo, se implementado)
      responses:
        '200':
          description: Lista de usuários
  /users/{id}:
    get:
      summary: Busca usuário por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuário encontrado
        '404':
          description: Usuário não encontrado
    put:
      summary: Atualiza usuário por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                avatar:
                  type: string
                bio:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '200':
          description: Usuário atualizado
        '404':
          description: Usuário não encontrado
    delete:
      summary: Remove usuário por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuário removido
        '404':
          description: Usuário não encontrado
  /auth/register:
    post:
      summary: Registra um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                avatar:
                  type: string
                bio:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '201':
          description: Usuário registrado
  /auth/login:
    post:
      summary: Realiza login do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login realizado com sucesso
        '401':
          description: Credenciais inválidas
  /auth/me:
    get:
      summary: Retorna dados do usuário autenticado
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dados do usuário autenticado
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
